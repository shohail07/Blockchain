import xml.etree.ElementTree as ET
import argparse

def scientific_notation_to_float(s):
    """Convert scientific notation string to float."""
    try:
        return float(s.lower().replace('ns', '').replace('+', ''))
    except ValueError:
        return 0.0

def parse_flowmon_xml(xml_file):
    tree = ET.parse(xml_file)
    root = tree.getroot()

    # Iterate through each flow collected in the FlowMonitor
    for flow in root.findall('.//FlowStats/Flow'):
        flowId = flow.get('flowId')
        txPackets = flow.get('txPackets', 0)
        rxPackets = flow.get('rxPackets', 0)
        txBytes = flow.get('txBytes', 0)
        rxBytes = flow.get('rxBytes', 0)
        timeFirstTxPacket = flow.get('timeFirstTxPacket', '0')
        timeLastRxPacket = flow.get('timeLastRxPacket', '0')

        # Convert scientific notation to float for calculations
        txPackets = int(txPackets) if txPackets else 0
        rxPackets = int(rxPackets) if rxPackets else 0
        txBytes = int(txBytes) if txBytes else 0
        rxBytes = int(rxBytes) if rxBytes else 0
        start_time = scientific_notation_to_float(timeFirstTxPacket)
        end_time = scientific_notation_to_float(timeLastRxPacket)
        
        # Calculate duration in seconds and throughput in Mbps
        duration = (end_time - start_time) / 1e9  # Convert nanoseconds to seconds
        throughput = (rxBytes * 8.0 / duration / 1e6) if duration > 0 else 0  # Mbps

        print(f"Flow ID: {flowId}, Tx Packets: {txPackets}, Rx Packets: {rxPackets}, "
              f"Tx Bytes: {txBytes}, Rx Bytes: {rxBytes}, "
              f"Throughput: {throughput:.2f} Mbps" if duration > 0 else "Throughput: N/A")

def main():
    parser = argparse.ArgumentParser(description="Parse FlowMonitor XML file generated by ns-3 simulations.")
    parser.add_argument("file_name", type=str, help="The FlowMonitor XML file name to parse.")
    
    args = parser.parse_args()

    parse_flowmon_xml(args.file_name)

if __name__ == "__main__":
    main()

